# -*- coding: utf-8 -*-
"""Slashmark_basic_3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ARlQAgLjz7qUu9tjiXeKztzga6RWBTgg
"""

from tensorflow.keras.datasets import mnist
(x_train,y_train),(x_test,y_test) = mnist.load_data()

print(x_train.shape)
print(x_test.shape)

print(x_train[0])

print(x_train.shape[0])
print(x_test.shape[0])

x_train = x_train.reshape(60000,28,28,1)
x_test = x_test.reshape(10000,28,28,1)

print(x_train)

from tensorflow.keras import utils
y_train = utils.to_categorical(y_train,10)
y_test = utils.to_categorical(y_test,10)

print(y_train.shape)
print(y_test.shape)
import matplotlib.pyplot as plt
plt.imshow(x_train[100],cmap='gray')

import matplotlib.pyplot as plt
plt.imshow(x_train[10],cmap='gray')

import matplotlib.pyplot as plt
plt.imshow(x_train[10000],cmap='gray')

arr1=y_train[100]
print(arr1)
arr2=y_train[10]
print(arr2)
arr3=y_train[10000]
print(arr3)

import numpy as np
label1=np.argmax(arr1)
print(label1)
label2=np.argmax(arr2)
print(label2)
label3=np.argmax(arr3)
print(label3)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D

model=Sequential()
input_layer=Dense(32,input_shape=(28,28,1))
model.add(input_layer)

conv_layer1 = Conv2D(32,kernel_size=(3,3),activation='relu')
model.add(conv_layer1)

conv_layer2 = Conv2D(32,kernel_size=(3,3),activation='relu')
model.add(conv_layer2)

pool_layer=MaxPooling2D(pool_size=(2,2))
model.add(pool_layer)

drop_layer=Dropout(0.5)
model.add(drop_layer)

flat_layer=Flatten()
model.add(flat_layer)

output_layer=Dense(10,activation='softmax')
model.add(output_layer)

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

history=model.fit(x_train,y_train,batch_size=32,epochs=5,verbose=1,validation_data=(x_test,y_test))

val_loss,val_acc = model.evaluate(x_test,y_test)
print(val_loss)
print(val_acc)

arr4=model.predict([x_train[100].reshape(1,28,28,1)])
labelx=np.argmax(arr4)
print(labelx)
arr5=model.predict([x_train[10].reshape(1,28,28,1)])
labely=np.argmax(arr5)
print(labely)
arr6=model.predict([x_train[10000].reshape(1,28,28,1)])
labelz=np.argmax(arr6)
print(labelz)

import matplotlib.pyplot as plt
plt.imshow(x_train[10],cmap='gray')

import matplotlib.pyplot as plt
plt.imshow(arr4,cmap='gray')